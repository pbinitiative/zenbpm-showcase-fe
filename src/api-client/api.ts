/* tslint:disable */
/* eslint-disable */
/**
 * ZenBPM OpenAPI
 * REST API for ZenBPM
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'processInstanceKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'processDefinitionKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'elementId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'bpmnElementType'?: string;
}
/**
 * 
 * @export
 * @interface ActivityPage
 */
export interface ActivityPage {
    /**
     * 
     * @type {number}
     * @memberof ActivityPage
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof ActivityPage
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof ActivityPage
     */
    'count': number;
    /**
     * 
     * @type {Array<Activity>}
     * @memberof ActivityPage
     */
    'items'?: Array<Activity>;
}
/**
 * 
 * @export
 * @interface CompleteJobRequest
 */
export interface CompleteJobRequest {
    /**
     * 
     * @type {string}
     * @memberof CompleteJobRequest
     */
    'jobKey': string;
    /**
     * 
     * @type {object}
     * @memberof CompleteJobRequest
     */
    'variables'?: object;
}
/**
 * 
 * @export
 * @interface CreateDecisionDefinition200Response
 */
export interface CreateDecisionDefinition200Response {
    /**
     * 
     * @type {string}
     * @memberof CreateDecisionDefinition200Response
     */
    'decisionDefinitionKey': string;
}
/**
 * 
 * @export
 * @interface CreateProcessDefinition200Response
 */
export interface CreateProcessDefinition200Response {
    /**
     * 
     * @type {string}
     * @memberof CreateProcessDefinition200Response
     */
    'processDefinitionKey': string;
}
/**
 * 
 * @export
 * @interface CreateProcessInstanceRequest
 */
export interface CreateProcessInstanceRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateProcessInstanceRequest
     */
    'processDefinitionKey': string;
    /**
     * 
     * @type {object}
     * @memberof CreateProcessInstanceRequest
     */
    'variables'?: object;
}
/**
 * 
 * @export
 * @interface DecisionDefinitionDetail
 */
export interface DecisionDefinitionDetail {
    /**
     * 
     * @type {string}
     * @memberof DecisionDefinitionDetail
     */
    'key': string;
    /**
     * 
     * @type {number}
     * @memberof DecisionDefinitionDetail
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof DecisionDefinitionDetail
     */
    'decisionDefinitionId': string;
    /**
     * 
     * @type {string}
     * @memberof DecisionDefinitionDetail
     */
    'dmnData'?: string;
}
/**
 * 
 * @export
 * @interface DecisionDefinitionSimple
 */
export interface DecisionDefinitionSimple {
    /**
     * 
     * @type {string}
     * @memberof DecisionDefinitionSimple
     */
    'key': string;
    /**
     * 
     * @type {number}
     * @memberof DecisionDefinitionSimple
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof DecisionDefinitionSimple
     */
    'decisionDefinitionId': string;
}
/**
 * 
 * @export
 * @interface DecisionDefinitionsPage
 */
export interface DecisionDefinitionsPage {
    /**
     * 
     * @type {number}
     * @memberof DecisionDefinitionsPage
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof DecisionDefinitionsPage
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof DecisionDefinitionsPage
     */
    'count': number;
    /**
     * 
     * @type {Array<DecisionDefinitionSimple>}
     * @memberof DecisionDefinitionsPage
     */
    'items': Array<DecisionDefinitionSimple>;
}
/**
 * 
 * @export
 * @interface EvaluateDecisionRequest
 */
export interface EvaluateDecisionRequest {
    /**
     * 
     * @type {string}
     * @memberof EvaluateDecisionRequest
     */
    'decisionId': string;
    /**
     * 
     * @type {string}
     * @memberof EvaluateDecisionRequest
     */
    'bindingType': EvaluateDecisionRequestBindingTypeEnum;
    /**
     * Can be used in combination with bindingType latest
     * @type {string}
     * @memberof EvaluateDecisionRequest
     */
    'decisionDefinitionId'?: string;
    /**
     * Is used in combination with bindingType versionTag
     * @type {string}
     * @memberof EvaluateDecisionRequest
     */
    'versionTag'?: string;
    /**
     * 
     * @type {object}
     * @memberof EvaluateDecisionRequest
     */
    'variables'?: object;
}

export const EvaluateDecisionRequestBindingTypeEnum = {
    Latest: 'latest',
    Deployment: 'deployment',
    VersionTag: 'versionTag'
} as const;

export type EvaluateDecisionRequestBindingTypeEnum = typeof EvaluateDecisionRequestBindingTypeEnum[keyof typeof EvaluateDecisionRequestBindingTypeEnum];

/**
 * 
 * @export
 * @interface EvaluatedDRDResult
 */
export interface EvaluatedDRDResult {
    /**
     * 
     * @type {Array<EvaluatedDecisionResult>}
     * @memberof EvaluatedDRDResult
     */
    'evaluatedDecisions': Array<EvaluatedDecisionResult>;
    /**
     * 
     * @type {object}
     * @memberof EvaluatedDRDResult
     */
    'decisionOutput': object;
}
/**
 * 
 * @export
 * @interface EvaluatedDecisionInput
 */
export interface EvaluatedDecisionInput {
    /**
     * 
     * @type {string}
     * @memberof EvaluatedDecisionInput
     */
    'inputId': string;
    /**
     * 
     * @type {string}
     * @memberof EvaluatedDecisionInput
     */
    'inputName': string;
    /**
     * 
     * @type {string}
     * @memberof EvaluatedDecisionInput
     */
    'inputExpression': string;
    /**
     * 
     * @type {object}
     * @memberof EvaluatedDecisionInput
     */
    'inputValue': object;
}
/**
 * 
 * @export
 * @interface EvaluatedDecisionOutput
 */
export interface EvaluatedDecisionOutput {
    /**
     * 
     * @type {string}
     * @memberof EvaluatedDecisionOutput
     */
    'outputId': string;
    /**
     * 
     * @type {string}
     * @memberof EvaluatedDecisionOutput
     */
    'outputName': string;
    /**
     * 
     * @type {object}
     * @memberof EvaluatedDecisionOutput
     */
    'outputValue': object;
}
/**
 * 
 * @export
 * @interface EvaluatedDecisionResult
 */
export interface EvaluatedDecisionResult {
    /**
     * 
     * @type {string}
     * @memberof EvaluatedDecisionResult
     */
    'decisionId': string;
    /**
     * 
     * @type {string}
     * @memberof EvaluatedDecisionResult
     */
    'decisionName': string;
    /**
     * 
     * @type {string}
     * @memberof EvaluatedDecisionResult
     */
    'decisionType': string;
    /**
     * 
     * @type {number}
     * @memberof EvaluatedDecisionResult
     */
    'decisionDefinitionVersion': number;
    /**
     * 
     * @type {string}
     * @memberof EvaluatedDecisionResult
     */
    'decisionDefinitionKey': string;
    /**
     * 
     * @type {string}
     * @memberof EvaluatedDecisionResult
     */
    'decisionDefinitionId': string;
    /**
     * 
     * @type {Array<EvaluatedDecisionRule>}
     * @memberof EvaluatedDecisionResult
     */
    'matchedRules': Array<EvaluatedDecisionRule>;
    /**
     * 
     * @type {object}
     * @memberof EvaluatedDecisionResult
     */
    'decisionOutput': object;
    /**
     * 
     * @type {Array<EvaluatedDecisionInput>}
     * @memberof EvaluatedDecisionResult
     */
    'evaluatedInputs': Array<EvaluatedDecisionInput>;
}
/**
 * 
 * @export
 * @interface EvaluatedDecisionRule
 */
export interface EvaluatedDecisionRule {
    /**
     * 
     * @type {string}
     * @memberof EvaluatedDecisionRule
     */
    'ruleId': string;
    /**
     * 
     * @type {number}
     * @memberof EvaluatedDecisionRule
     */
    'ruleIndex': number;
    /**
     * 
     * @type {Array<EvaluatedDecisionOutput>}
     * @memberof EvaluatedDecisionRule
     */
    'evaluatedOutputs': Array<EvaluatedDecisionOutput>;
}
/**
 * 
 * @export
 * @interface FlowElementHistory
 */
export interface FlowElementHistory {
    /**
     * 
     * @type {string}
     * @memberof FlowElementHistory
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof FlowElementHistory
     */
    'processInstanceKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof FlowElementHistory
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FlowElementHistory
     */
    'elementId'?: string;
}
/**
 * 
 * @export
 * @interface FlowElementHistoryPage
 */
export interface FlowElementHistoryPage {
    /**
     * 
     * @type {number}
     * @memberof FlowElementHistoryPage
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof FlowElementHistoryPage
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof FlowElementHistoryPage
     */
    'count': number;
    /**
     * 
     * @type {Array<FlowElementHistory>}
     * @memberof FlowElementHistoryPage
     */
    'items'?: Array<FlowElementHistory>;
}
/**
 * 
 * @export
 * @interface Incident
 */
export interface Incident {
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    'elementInstanceKey': string;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    'elementId': string;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    'processInstanceKey': string;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    'resolvedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    'executionToken': string;
}
/**
 * 
 * @export
 * @interface IncidentPage
 */
export interface IncidentPage {
    /**
     * 
     * @type {number}
     * @memberof IncidentPage
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof IncidentPage
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof IncidentPage
     */
    'count': number;
    /**
     * 
     * @type {Array<Incident>}
     * @memberof IncidentPage
     */
    'items': Array<Incident>;
}
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'elementId': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'processInstanceKey': string;
    /**
     * 
     * @type {JobState}
     * @memberof Job
     */
    'state': JobState;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'createdAt': string;
    /**
     * 
     * @type {object}
     * @memberof Job
     */
    'variables': object;
}


/**
 * 
 * @export
 * @interface JobPage
 */
export interface JobPage {
    /**
     * 
     * @type {number}
     * @memberof JobPage
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof JobPage
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof JobPage
     */
    'count': number;
    /**
     * 
     * @type {Array<Job>}
     * @memberof JobPage
     */
    'items': Array<Job>;
}
/**
 * 
 * @export
 * @interface JobPartitionPage
 */
export interface JobPartitionPage {
    /**
     * 
     * @type {number}
     * @memberof JobPartitionPage
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof JobPartitionPage
     */
    'size': number;
    /**
     * number of items returned
     * @type {number}
     * @memberof JobPartitionPage
     */
    'count': number;
    /**
     * 
     * @type {Array<PartitionJobs>}
     * @memberof JobPartitionPage
     */
    'partitions': Array<PartitionJobs>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const JobState = {
    Active: 'active',
    Completed: 'completed',
    Terminated: 'terminated',
    Failed: 'failed'
} as const;

export type JobState = typeof JobState[keyof typeof JobState];


/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface PageMetadata
 */
export interface PageMetadata {
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface PartitionJobs
 */
export interface PartitionJobs {
    /**
     * 
     * @type {number}
     * @memberof PartitionJobs
     */
    'partition': number;
    /**
     * 
     * @type {Array<Job>}
     * @memberof PartitionJobs
     */
    'items': Array<Job>;
}
/**
 * 
 * @export
 * @interface PartitionProcessInstances
 */
export interface PartitionProcessInstances {
    /**
     * 
     * @type {number}
     * @memberof PartitionProcessInstances
     */
    'partition': number;
    /**
     * 
     * @type {Array<ProcessInstance>}
     * @memberof PartitionProcessInstances
     */
    'items': Array<ProcessInstance>;
}
/**
 * 
 * @export
 * @interface PartitionedPageMetadata
 */
export interface PartitionedPageMetadata {
    /**
     * 
     * @type {number}
     * @memberof PartitionedPageMetadata
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof PartitionedPageMetadata
     */
    'size': number;
    /**
     * number of items returned
     * @type {number}
     * @memberof PartitionedPageMetadata
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface ProcessDefinitionDetail
 */
export interface ProcessDefinitionDetail {
    /**
     * 
     * @type {string}
     * @memberof ProcessDefinitionDetail
     */
    'key': string;
    /**
     * 
     * @type {number}
     * @memberof ProcessDefinitionDetail
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof ProcessDefinitionDetail
     */
    'bpmnProcessId': string;
    /**
     * 
     * @type {string}
     * @memberof ProcessDefinitionDetail
     */
    'bpmnData'?: string;
}
/**
 * 
 * @export
 * @interface ProcessDefinitionSimple
 */
export interface ProcessDefinitionSimple {
    /**
     * 
     * @type {string}
     * @memberof ProcessDefinitionSimple
     */
    'key': string;
    /**
     * 
     * @type {number}
     * @memberof ProcessDefinitionSimple
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof ProcessDefinitionSimple
     */
    'bpmnProcessId': string;
}
/**
 * 
 * @export
 * @interface ProcessDefinitionsPage
 */
export interface ProcessDefinitionsPage {
    /**
     * 
     * @type {number}
     * @memberof ProcessDefinitionsPage
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof ProcessDefinitionsPage
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof ProcessDefinitionsPage
     */
    'count': number;
    /**
     * 
     * @type {Array<ProcessDefinitionSimple>}
     * @memberof ProcessDefinitionsPage
     */
    'items': Array<ProcessDefinitionSimple>;
}
/**
 * 
 * @export
 * @interface ProcessInstance
 */
export interface ProcessInstance {
    /**
     * 
     * @type {string}
     * @memberof ProcessInstance
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstance
     */
    'processDefinitionKey': string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstance
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstance
     */
    'state': ProcessInstanceStateEnum;
    /**
     * 
     * @type {object}
     * @memberof ProcessInstance
     */
    'variables': object;
}

export const ProcessInstanceStateEnum = {
    Active: 'active',
    Completed: 'completed',
    Terminated: 'terminated'
} as const;

export type ProcessInstanceStateEnum = typeof ProcessInstanceStateEnum[keyof typeof ProcessInstanceStateEnum];

/**
 * 
 * @export
 * @interface ProcessInstancePage
 */
export interface ProcessInstancePage {
    /**
     * 
     * @type {number}
     * @memberof ProcessInstancePage
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof ProcessInstancePage
     */
    'size': number;
    /**
     * number of items returned
     * @type {number}
     * @memberof ProcessInstancePage
     */
    'count': number;
    /**
     * 
     * @type {Array<PartitionProcessInstances>}
     * @memberof ProcessInstancePage
     */
    'partitions': Array<PartitionProcessInstances>;
}
/**
 * 
 * @export
 * @interface PublishMessageRequest
 */
export interface PublishMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof PublishMessageRequest
     */
    'processInstanceKey': string;
    /**
     * 
     * @type {string}
     * @memberof PublishMessageRequest
     */
    'messageName': string;
    /**
     * 
     * @type {object}
     * @memberof PublishMessageRequest
     */
    'variables'?: object;
}
/**
 * 
 * @export
 * @interface TestStopCpuProfile200Response
 */
export interface TestStopCpuProfile200Response {
    /**
     * 
     * @type {string}
     * @memberof TestStopCpuProfile200Response
     */
    'pprof'?: string;
}

/**
 * DecisionDefinitionsApi - axios parameter creator
 * @export
 */
export const DecisionDefinitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deploy a new decision definition
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDecisionDefinition: async (body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createDecisionDefinition', 'body', body)
            const localVarPath = `/decision-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get decision definition
         * @param {string} decisionDefinitionKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinition: async (decisionDefinitionKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'decisionDefinitionKey' is not null or undefined
            assertParamExists('getDecisionDefinition', 'decisionDefinitionKey', decisionDefinitionKey)
            const localVarPath = `/decision-definitions/{decisionDefinitionKey}`
                .replace(`{${"decisionDefinitionKey"}}`, encodeURIComponent(String(decisionDefinitionKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of decision definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinitions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/decision-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DecisionDefinitionsApi - functional programming interface
 * @export
 */
export const DecisionDefinitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DecisionDefinitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deploy a new decision definition
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDecisionDefinition(body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDecisionDefinition200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDecisionDefinition(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DecisionDefinitionsApi.createDecisionDefinition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get decision definition
         * @param {string} decisionDefinitionKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinition(decisionDefinitionKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecisionDefinitionDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDecisionDefinition(decisionDefinitionKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DecisionDefinitionsApi.getDecisionDefinition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of decision definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecisionDefinitions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecisionDefinitionsPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDecisionDefinitions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DecisionDefinitionsApi.getDecisionDefinitions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DecisionDefinitionsApi - factory interface
 * @export
 */
export const DecisionDefinitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DecisionDefinitionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Deploy a new decision definition
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDecisionDefinition(body: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateDecisionDefinition200Response> {
            return localVarFp.createDecisionDefinition(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get decision definition
         * @param {string} decisionDefinitionKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinition(decisionDefinitionKey: string, options?: RawAxiosRequestConfig): AxiosPromise<DecisionDefinitionDetail> {
            return localVarFp.getDecisionDefinition(decisionDefinitionKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of decision definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecisionDefinitions(options?: RawAxiosRequestConfig): AxiosPromise<DecisionDefinitionsPage> {
            return localVarFp.getDecisionDefinitions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DecisionDefinitionsApi - object-oriented interface
 * @export
 * @class DecisionDefinitionsApi
 * @extends {BaseAPI}
 */
export class DecisionDefinitionsApi extends BaseAPI {
    /**
     * 
     * @summary Deploy a new decision definition
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionsApi
     */
    public createDecisionDefinition(body: string, options?: RawAxiosRequestConfig) {
        return DecisionDefinitionsApiFp(this.configuration).createDecisionDefinition(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get decision definition
     * @param {string} decisionDefinitionKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionsApi
     */
    public getDecisionDefinition(decisionDefinitionKey: string, options?: RawAxiosRequestConfig) {
        return DecisionDefinitionsApiFp(this.configuration).getDecisionDefinition(decisionDefinitionKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of decision definitions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionDefinitionsApi
     */
    public getDecisionDefinitions(options?: RawAxiosRequestConfig) {
        return DecisionDefinitionsApiFp(this.configuration).getDecisionDefinitions(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DecisionEvaluationApi - axios parameter creator
 * @export
 */
export const DecisionEvaluationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Evaluate latest version of decision directly in engine
         * @param {EvaluateDecisionRequest} evaluateDecisionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateDecision: async (evaluateDecisionRequest: EvaluateDecisionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evaluateDecisionRequest' is not null or undefined
            assertParamExists('evaluateDecision', 'evaluateDecisionRequest', evaluateDecisionRequest)
            const localVarPath = `/decision/evaluation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(evaluateDecisionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DecisionEvaluationApi - functional programming interface
 * @export
 */
export const DecisionEvaluationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DecisionEvaluationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Evaluate latest version of decision directly in engine
         * @param {EvaluateDecisionRequest} evaluateDecisionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateDecision(evaluateDecisionRequest: EvaluateDecisionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvaluatedDRDResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluateDecision(evaluateDecisionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DecisionEvaluationApi.evaluateDecision']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DecisionEvaluationApi - factory interface
 * @export
 */
export const DecisionEvaluationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DecisionEvaluationApiFp(configuration)
    return {
        /**
         * 
         * @summary Evaluate latest version of decision directly in engine
         * @param {EvaluateDecisionRequest} evaluateDecisionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateDecision(evaluateDecisionRequest: EvaluateDecisionRequest, options?: RawAxiosRequestConfig): AxiosPromise<EvaluatedDRDResult> {
            return localVarFp.evaluateDecision(evaluateDecisionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DecisionEvaluationApi - object-oriented interface
 * @export
 * @class DecisionEvaluationApi
 * @extends {BaseAPI}
 */
export class DecisionEvaluationApi extends BaseAPI {
    /**
     * 
     * @summary Evaluate latest version of decision directly in engine
     * @param {EvaluateDecisionRequest} evaluateDecisionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionEvaluationApi
     */
    public evaluateDecision(evaluateDecisionRequest: EvaluateDecisionRequest, options?: RawAxiosRequestConfig) {
        return DecisionEvaluationApiFp(this.configuration).evaluateDecision(evaluateDecisionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IncidentsApi - axios parameter creator
 * @export
 */
export const IncidentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Resolve an incident
         * @param {string} incidentKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveIncident: async (incidentKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'incidentKey' is not null or undefined
            assertParamExists('resolveIncident', 'incidentKey', incidentKey)
            const localVarPath = `/incident/{incidentKey}/resolve`
                .replace(`{${"incidentKey"}}`, encodeURIComponent(String(incidentKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IncidentsApi - functional programming interface
 * @export
 */
export const IncidentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IncidentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Resolve an incident
         * @param {string} incidentKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveIncident(incidentKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveIncident(incidentKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IncidentsApi.resolveIncident']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IncidentsApi - factory interface
 * @export
 */
export const IncidentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IncidentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Resolve an incident
         * @param {string} incidentKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveIncident(incidentKey: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resolveIncident(incidentKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IncidentsApi - object-oriented interface
 * @export
 * @class IncidentsApi
 * @extends {BaseAPI}
 */
export class IncidentsApi extends BaseAPI {
    /**
     * 
     * @summary Resolve an incident
     * @param {string} incidentKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public resolveIncident(incidentKey: string, options?: RawAxiosRequestConfig) {
        return IncidentsApiFp(this.configuration).resolveIncident(incidentKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Complete a job
         * @param {CompleteJobRequest} completeJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeJob: async (completeJobRequest: CompleteJobRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'completeJobRequest' is not null or undefined
            assertParamExists('completeJob', 'completeJobRequest', completeJobRequest)
            const localVarPath = `/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(completeJobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of jobs on partitions
         * @param {string} [jobType] 
         * @param {JobState} [state] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobs: async (jobType?: string, state?: JobState, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobType !== undefined) {
                localVarQueryParameter['jobType'] = jobType;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Complete a job
         * @param {CompleteJobRequest} completeJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeJob(completeJobRequest: CompleteJobRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeJob(completeJobRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.completeJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of jobs on partitions
         * @param {string} [jobType] 
         * @param {JobState} [state] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobs(jobType?: string, state?: JobState, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobPartitionPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobs(jobType, state, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.getJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * 
         * @summary Complete a job
         * @param {CompleteJobRequest} completeJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeJob(completeJobRequest: CompleteJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.completeJob(completeJobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of jobs on partitions
         * @param {string} [jobType] 
         * @param {JobState} [state] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobs(jobType?: string, state?: JobState, page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<JobPartitionPage> {
            return localVarFp.getJobs(jobType, state, page, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
    /**
     * 
     * @summary Complete a job
     * @param {CompleteJobRequest} completeJobRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public completeJob(completeJobRequest: CompleteJobRequest, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).completeJob(completeJobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of jobs on partitions
     * @param {string} [jobType] 
     * @param {JobState} [state] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJobs(jobType?: string, state?: JobState, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).getJobs(jobType, state, page, size, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MessagesApi - axios parameter creator
 * @export
 */
export const MessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Publish a message
         * @param {PublishMessageRequest} publishMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishMessage: async (publishMessageRequest: PublishMessageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publishMessageRequest' is not null or undefined
            assertParamExists('publishMessage', 'publishMessageRequest', publishMessageRequest)
            const localVarPath = `/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publishMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Publish a message
         * @param {PublishMessageRequest} publishMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishMessage(publishMessageRequest: PublishMessageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishMessage(publishMessageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesApi.publishMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagesApiFp(configuration)
    return {
        /**
         * 
         * @summary Publish a message
         * @param {PublishMessageRequest} publishMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishMessage(publishMessageRequest: PublishMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.publishMessage(publishMessageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export class MessagesApi extends BaseAPI {
    /**
     * 
     * @summary Publish a message
     * @param {PublishMessageRequest} publishMessageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public publishMessage(publishMessageRequest: PublishMessageRequest, options?: RawAxiosRequestConfig) {
        return MessagesApiFp(this.configuration).publishMessage(publishMessageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProcessDefinitionsApi - axios parameter creator
 * @export
 */
export const ProcessDefinitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deploy a new process definition
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessDefinition: async (body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createProcessDefinition', 'body', body)
            const localVarPath = `/process-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get process definition
         * @param {string} processDefinitionKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessDefinition: async (processDefinitionKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processDefinitionKey' is not null or undefined
            assertParamExists('getProcessDefinition', 'processDefinitionKey', processDefinitionKey)
            const localVarPath = `/process-definitions/{processDefinitionKey}`
                .replace(`{${"processDefinitionKey"}}`, encodeURIComponent(String(processDefinitionKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of process definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessDefinitions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessDefinitionsApi - functional programming interface
 * @export
 */
export const ProcessDefinitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProcessDefinitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deploy a new process definition
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProcessDefinition(body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProcessDefinition200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProcessDefinition(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessDefinitionsApi.createProcessDefinition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get process definition
         * @param {string} processDefinitionKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessDefinition(processDefinitionKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessDefinitionDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessDefinition(processDefinitionKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessDefinitionsApi.getProcessDefinition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of process definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessDefinitions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessDefinitionsPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessDefinitions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessDefinitionsApi.getProcessDefinitions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProcessDefinitionsApi - factory interface
 * @export
 */
export const ProcessDefinitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProcessDefinitionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Deploy a new process definition
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessDefinition(body: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateProcessDefinition200Response> {
            return localVarFp.createProcessDefinition(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get process definition
         * @param {string} processDefinitionKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessDefinition(processDefinitionKey: string, options?: RawAxiosRequestConfig): AxiosPromise<ProcessDefinitionDetail> {
            return localVarFp.getProcessDefinition(processDefinitionKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of process definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessDefinitions(options?: RawAxiosRequestConfig): AxiosPromise<ProcessDefinitionsPage> {
            return localVarFp.getProcessDefinitions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcessDefinitionsApi - object-oriented interface
 * @export
 * @class ProcessDefinitionsApi
 * @extends {BaseAPI}
 */
export class ProcessDefinitionsApi extends BaseAPI {
    /**
     * 
     * @summary Deploy a new process definition
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessDefinitionsApi
     */
    public createProcessDefinition(body: string, options?: RawAxiosRequestConfig) {
        return ProcessDefinitionsApiFp(this.configuration).createProcessDefinition(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get process definition
     * @param {string} processDefinitionKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessDefinitionsApi
     */
    public getProcessDefinition(processDefinitionKey: string, options?: RawAxiosRequestConfig) {
        return ProcessDefinitionsApiFp(this.configuration).getProcessDefinition(processDefinitionKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of process definitions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessDefinitionsApi
     */
    public getProcessDefinitions(options?: RawAxiosRequestConfig) {
        return ProcessDefinitionsApiFp(this.configuration).getProcessDefinitions(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProcessInstancesApi - axios parameter creator
 * @export
 */
export const ProcessInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new process instance
         * @param {CreateProcessInstanceRequest} createProcessInstanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessInstance: async (createProcessInstanceRequest: CreateProcessInstanceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProcessInstanceRequest' is not null or undefined
            assertParamExists('createProcessInstance', 'createProcessInstanceRequest', createProcessInstanceRequest)
            const localVarPath = `/process-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProcessInstanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of activities for a process instance
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivities: async (processInstanceKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processInstanceKey' is not null or undefined
            assertParamExists('getActivities', 'processInstanceKey', processInstanceKey)
            const localVarPath = `/process-instances/{processInstanceKey}/activities`
                .replace(`{${"processInstanceKey"}}`, encodeURIComponent(String(processInstanceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of visited flow elements for a process instance
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory: async (processInstanceKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processInstanceKey' is not null or undefined
            assertParamExists('getHistory', 'processInstanceKey', processInstanceKey)
            const localVarPath = `/process-instances/{processInstanceKey}/history`
                .replace(`{${"processInstanceKey"}}`, encodeURIComponent(String(processInstanceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of incidents for a process instance
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncidents: async (processInstanceKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processInstanceKey' is not null or undefined
            assertParamExists('getIncidents', 'processInstanceKey', processInstanceKey)
            const localVarPath = `/process-instances/{processInstanceKey}/incidents`
                .replace(`{${"processInstanceKey"}}`, encodeURIComponent(String(processInstanceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get state of a process instance selected by processInstanceId
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstance: async (processInstanceKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processInstanceKey' is not null or undefined
            assertParamExists('getProcessInstance', 'processInstanceKey', processInstanceKey)
            const localVarPath = `/process-instances/{processInstanceKey}`
                .replace(`{${"processInstanceKey"}}`, encodeURIComponent(String(processInstanceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of jobs for a process instance
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstanceJobs: async (processInstanceKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processInstanceKey' is not null or undefined
            assertParamExists('getProcessInstanceJobs', 'processInstanceKey', processInstanceKey)
            const localVarPath = `/process-instances/{processInstanceKey}/jobs`
                .replace(`{${"processInstanceKey"}}`, encodeURIComponent(String(processInstanceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of running process instances
         * @param {string} processDefinitionKey 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstances: async (processDefinitionKey: string, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processDefinitionKey' is not null or undefined
            assertParamExists('getProcessInstances', 'processDefinitionKey', processDefinitionKey)
            const localVarPath = `/process-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessInstancesApi - functional programming interface
 * @export
 */
export const ProcessInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProcessInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new process instance
         * @param {CreateProcessInstanceRequest} createProcessInstanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProcessInstance(createProcessInstanceRequest: CreateProcessInstanceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInstance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProcessInstance(createProcessInstanceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessInstancesApi.createProcessInstance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of activities for a process instance
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivities(processInstanceKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivities(processInstanceKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessInstancesApi.getActivities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of visited flow elements for a process instance
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistory(processInstanceKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowElementHistoryPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistory(processInstanceKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessInstancesApi.getHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of incidents for a process instance
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncidents(processInstanceKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncidentPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIncidents(processInstanceKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessInstancesApi.getIncidents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get state of a process instance selected by processInstanceId
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstance(processInstanceKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInstance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessInstance(processInstanceKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessInstancesApi.getProcessInstance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of jobs for a process instance
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstanceJobs(processInstanceKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessInstanceJobs(processInstanceKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessInstancesApi.getProcessInstanceJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of running process instances
         * @param {string} processDefinitionKey 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstances(processDefinitionKey: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInstancePage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessInstances(processDefinitionKey, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessInstancesApi.getProcessInstances']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProcessInstancesApi - factory interface
 * @export
 */
export const ProcessInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProcessInstancesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new process instance
         * @param {CreateProcessInstanceRequest} createProcessInstanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessInstance(createProcessInstanceRequest: CreateProcessInstanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProcessInstance> {
            return localVarFp.createProcessInstance(createProcessInstanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of activities for a process instance
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivities(processInstanceKey: string, options?: RawAxiosRequestConfig): AxiosPromise<ActivityPage> {
            return localVarFp.getActivities(processInstanceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of visited flow elements for a process instance
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory(processInstanceKey: string, options?: RawAxiosRequestConfig): AxiosPromise<FlowElementHistoryPage> {
            return localVarFp.getHistory(processInstanceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of incidents for a process instance
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncidents(processInstanceKey: string, options?: RawAxiosRequestConfig): AxiosPromise<IncidentPage> {
            return localVarFp.getIncidents(processInstanceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get state of a process instance selected by processInstanceId
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstance(processInstanceKey: string, options?: RawAxiosRequestConfig): AxiosPromise<ProcessInstance> {
            return localVarFp.getProcessInstance(processInstanceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of jobs for a process instance
         * @param {string} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstanceJobs(processInstanceKey: string, options?: RawAxiosRequestConfig): AxiosPromise<JobPage> {
            return localVarFp.getProcessInstanceJobs(processInstanceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of running process instances
         * @param {string} processDefinitionKey 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstances(processDefinitionKey: string, page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<ProcessInstancePage> {
            return localVarFp.getProcessInstances(processDefinitionKey, page, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcessInstancesApi - object-oriented interface
 * @export
 * @class ProcessInstancesApi
 * @extends {BaseAPI}
 */
export class ProcessInstancesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new process instance
     * @param {CreateProcessInstanceRequest} createProcessInstanceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstancesApi
     */
    public createProcessInstance(createProcessInstanceRequest: CreateProcessInstanceRequest, options?: RawAxiosRequestConfig) {
        return ProcessInstancesApiFp(this.configuration).createProcessInstance(createProcessInstanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of activities for a process instance
     * @param {string} processInstanceKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstancesApi
     */
    public getActivities(processInstanceKey: string, options?: RawAxiosRequestConfig) {
        return ProcessInstancesApiFp(this.configuration).getActivities(processInstanceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of visited flow elements for a process instance
     * @param {string} processInstanceKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstancesApi
     */
    public getHistory(processInstanceKey: string, options?: RawAxiosRequestConfig) {
        return ProcessInstancesApiFp(this.configuration).getHistory(processInstanceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of incidents for a process instance
     * @param {string} processInstanceKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstancesApi
     */
    public getIncidents(processInstanceKey: string, options?: RawAxiosRequestConfig) {
        return ProcessInstancesApiFp(this.configuration).getIncidents(processInstanceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get state of a process instance selected by processInstanceId
     * @param {string} processInstanceKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstancesApi
     */
    public getProcessInstance(processInstanceKey: string, options?: RawAxiosRequestConfig) {
        return ProcessInstancesApiFp(this.configuration).getProcessInstance(processInstanceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of jobs for a process instance
     * @param {string} processInstanceKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstancesApi
     */
    public getProcessInstanceJobs(processInstanceKey: string, options?: RawAxiosRequestConfig) {
        return ProcessInstancesApiFp(this.configuration).getProcessInstanceJobs(processInstanceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of running process instances
     * @param {string} processDefinitionKey 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstancesApi
     */
    public getProcessInstances(processDefinitionKey: string, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return ProcessInstancesApiFp(this.configuration).getProcessInstances(processDefinitionKey, page, size, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StartCpuProfileApi - axios parameter creator
 * @export
 */
export const StartCpuProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary start a cpu profiler
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testStartCpuProfile: async (nodeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('testStartCpuProfile', 'nodeId', nodeId)
            const localVarPath = `/test/{nodeId}/start-cpu-profile`
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StartCpuProfileApi - functional programming interface
 * @export
 */
export const StartCpuProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StartCpuProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary start a cpu profiler
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testStartCpuProfile(nodeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testStartCpuProfile(nodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StartCpuProfileApi.testStartCpuProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StartCpuProfileApi - factory interface
 * @export
 */
export const StartCpuProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StartCpuProfileApiFp(configuration)
    return {
        /**
         * 
         * @summary start a cpu profiler
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testStartCpuProfile(nodeId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.testStartCpuProfile(nodeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StartCpuProfileApi - object-oriented interface
 * @export
 * @class StartCpuProfileApi
 * @extends {BaseAPI}
 */
export class StartCpuProfileApi extends BaseAPI {
    /**
     * 
     * @summary start a cpu profiler
     * @param {string} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartCpuProfileApi
     */
    public testStartCpuProfile(nodeId: string, options?: RawAxiosRequestConfig) {
        return StartCpuProfileApiFp(this.configuration).testStartCpuProfile(nodeId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StopCpuProfileApi - axios parameter creator
 * @export
 */
export const StopCpuProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary stop a cpu profiler
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testStopCpuProfile: async (nodeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('testStopCpuProfile', 'nodeId', nodeId)
            const localVarPath = `/test/{nodeId}/stop-cpu-profile`
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StopCpuProfileApi - functional programming interface
 * @export
 */
export const StopCpuProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StopCpuProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary stop a cpu profiler
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testStopCpuProfile(nodeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestStopCpuProfile200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testStopCpuProfile(nodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StopCpuProfileApi.testStopCpuProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StopCpuProfileApi - factory interface
 * @export
 */
export const StopCpuProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StopCpuProfileApiFp(configuration)
    return {
        /**
         * 
         * @summary stop a cpu profiler
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testStopCpuProfile(nodeId: string, options?: RawAxiosRequestConfig): AxiosPromise<TestStopCpuProfile200Response> {
            return localVarFp.testStopCpuProfile(nodeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StopCpuProfileApi - object-oriented interface
 * @export
 * @class StopCpuProfileApi
 * @extends {BaseAPI}
 */
export class StopCpuProfileApi extends BaseAPI {
    /**
     * 
     * @summary stop a cpu profiler
     * @param {string} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StopCpuProfileApi
     */
    public testStopCpuProfile(nodeId: string, options?: RawAxiosRequestConfig) {
        return StopCpuProfileApiFp(this.configuration).testStopCpuProfile(nodeId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary start a cpu profiler
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testStartCpuProfile: async (nodeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('testStartCpuProfile', 'nodeId', nodeId)
            const localVarPath = `/test/{nodeId}/start-cpu-profile`
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary stop a cpu profiler
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testStopCpuProfile: async (nodeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('testStopCpuProfile', 'nodeId', nodeId)
            const localVarPath = `/test/{nodeId}/stop-cpu-profile`
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary start a cpu profiler
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testStartCpuProfile(nodeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testStartCpuProfile(nodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestApi.testStartCpuProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary stop a cpu profiler
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testStopCpuProfile(nodeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestStopCpuProfile200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testStopCpuProfile(nodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestApi.testStopCpuProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * 
         * @summary start a cpu profiler
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testStartCpuProfile(nodeId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.testStartCpuProfile(nodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary stop a cpu profiler
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testStopCpuProfile(nodeId: string, options?: RawAxiosRequestConfig): AxiosPromise<TestStopCpuProfile200Response> {
            return localVarFp.testStopCpuProfile(nodeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @summary start a cpu profiler
     * @param {string} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public testStartCpuProfile(nodeId: string, options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).testStartCpuProfile(nodeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary stop a cpu profiler
     * @param {string} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public testStopCpuProfile(nodeId: string, options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).testStopCpuProfile(nodeId, options).then((request) => request(this.axios, this.basePath));
    }
}



